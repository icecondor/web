extends layout

block head
  script(src='/assets/d3.v3.min.js')

block content
  div.page-data
    div.section-spacer
      h2 Stats
      div.user
        span.label Username:
        span.username

      div.stats.hidden
        div.day
          div.location
            | Today location count:
            = ' '
            span.count
        div.total
          | Total record count:
          = ' '
          span.count

    div.section-spacer
      h2 Datastream
      pre
        | N-Cell location G-GPS location b-heartbeat a-connection attempt c-connected d-disconnected
      svg#graph(style="background-color: #ddd; width: 100%; height: 200px;")

    div.section-spacer
      h2 Download
      ul.downloadq
      form.downloadq
        input(type='submit' value='download')

  template#download.hidden
    li
      span Request date: {{time}}
      span status: {{status}}

  script.
    jQuery(function(){
      var paths = window.location.pathname.split('/')
      var username = paths[1]
      var qparams = url_params(window.location.href)
      console.log(qparams)
      $('.page-data .user .username').html(username)
      $('form.downloadq').submit(function(evt){
        evt.preventDefault()
        download_add(evt.target)
      })

      statusTab('Connecting')
      iceCondor.on('auth', function(session){
        var me_tx = iceCondor.api('user.detail')
        iceCondor.onResponse(me_tx, function(me) {
          user_detail(me)
          statusTab('loading data')

          /* var data_tx = iceCondor.api('activity.stats', {type: 'location'})
          iceCondor.onResponse(data_tx, function(stats){
            statusTab('')
            console.log(stats)
            //stats_detail(stats)
          })*/

          var pts = []
          var graph = d3.select('#graph')
          var graph_height = $('#graph').height()
          var graph_width = $('#graph').width()
          var stop = new Date()
          var hours = qparams['hours'] || 2
          var slot_count = hours*60
          var start = d3.time.minute.offset(stop, -1*hours*60)
          var filter = {username: username,
                        start: start.toISOString(),
                        stop: stop.toISOString(),
                        count: hours*60*2,
                        order: 'oldest'}
          var time_scale = d3.time.scale()
                    .domain([start, stop])
                    .range([0,graph_width])
          var xAxis = d3.svg.axis()
              .scale(time_scale)
              .orient('bottom')
              .ticks(d3.time.minutes, 15)
          graph.append("g")
              .attr('class', 'x axis')
              .attr('transform', 'translate(0,'+(graph_height-30)+')')
              .call(xAxis);

          var follow_tx = iceCondor.api('stream.follow', filter)
          iceCondor.onResponse(follow_tx, function(msg){
            statusTab()
            iceCondor.onResponse(msg.stream_id, function(node){
              var vnode = add_graph_node(node);
              pts.push(vnode)
              var slots = graph.selectAll('g.dpoint').data(pts)
              draw_slots(slots, time_scale, graph_width/slot_count, graph_height)
              console.log(pts.length, vnode)
            })
          })
        })
        download_list()
      })

      if(getKey()){
        iceCondor.connect()
      } else {
        window.location = "/"
      }
    })

    function user_detail(me){
    }

    function stats_detail(stats){
      $('.page-data .stats .total .count').html(stats.total)
      $('.page-data .stats .day .count').html(stats.day.total)
      $('.page-data .stats .day .location .count').html(stats.day.location)
    }

    function add_graph_node(node){
      var type_code = capitaliseFirstLetter(node.type)
      var provider_code = ""

      if(node.type == "location"){
        provider_code = capitaliseFirstLetter(node.provider)
      }
      if(node.type == "config"){
        if(node.recording){
          provider_code = "Turn "+node.recording
        } else if(node.frequency){
          provider_code = "Freq "+node.frequency+" min."
        } else {
          provider_code = "Unknown"
        }
      }
      if(node.type == "heartbeat"){
        provider_code = "<div>"+node.battery.percentage +"% batt / "+
                        (node.power ? "AC on" : "AC off")+"</div>"
        if(node.memory){
          provider_code += "<div>Free: "+(node.memory.free/1024/1024).toFixed(0)+"mb"+
                           " / Total "+(node.memory.total/1024/1024).toFixed(0)+"mb</div>"
        }
      }
      var vnode = { type: node.type,
                    code: type_code,
                    provider: provider_code,
                    time: node.date }
      return vnode
    }

    function capitaliseFirstLetter(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    }

    function draw_slots(slots, time_scale, slot_width, slot_height){
      var slot = slots.enter().append('svg:g')
                        .attr('class', 'dpoint')
                        .attr('transform', function(d,i){return 'translate('+
                                              time_scale(new Date(d.time))+',0)'})
      var slot_unit_height = slot_height / 6
      var heights = {
                     'location':slot_unit_height*0,
                     'heartbeat':slot_unit_height*1,
                     'connecting':slot_unit_height*2,
                     'connected':slot_unit_height*3,
                     'disconnected':slot_unit_height*4,
                     }
      slot.append('rect')
        .attr('x', 0)
        .attr('y', function(d){return heights[d.type]})
        .attr('width', slot_width)
        .attr('height', slot_unit_height)
        .attr('fill', '#eee')
        .attr('stroke', 'blue')
      slot.append("text")
        .text(function(w){
          if(w.type == 'location') {
            if(w.provider == 'Network') {
              return "N"
            }
            if(w.provider == 'Gps') {
              return "G"
            }
          } else if(w.type == 'heartbeat') {
            return 'b'
          } else if(w.type == 'connecting') {
            return 'a'
          } else {
            return w.type[0];
          }
        })
        .attr('x', slot_width/5)
        .attr('y', function(d){return heights[d.type]+(slot_unit_height*0.6)})
        .attr('stroke', 'brown')
    }

    function download_add(form) {
      console.log('download', form)
      var zip_tx = iceCondor.api('stream.zip')
      iceCondor.onResponse(zip_tx, function(msg){
        download_list()
      })
    }

    function download_list() {
      var zip_tx = iceCondor.api('stream.ziplist')
      iceCondor.onResponse(zip_tx, function(msg){
        $('ul.downloadq').empty()
        var entry_tmpl = uStache.compile($('template#download').html())
        msg.forEach(function(entry){
          $('ul.downloadq').append(entry_tmpl(entry))
        })
      })
    }
